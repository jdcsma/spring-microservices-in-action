debug: false

# @See org.springframework.boot.autoconfigure.web.ServerProperties
server:
  port: 8080

  cloud:
    loadbalancer:
      ribbon:
        # The property is important.
        # It disables the default Netflix Ribbon-backed load balancing strategy
        # that’s been in place since Spring Cloud debuted in 2015.
        # We want to use the new Spring Cloud Load balancer.
        enabled: false
      cache:
        # Disables Spring Cloud LoadBalancer caching mechanism.
        enabled: false

# @See org.springframework.cloud.netflix.zuul.filters.ZuulProperties
zuul:
  prefix: "/api"
  # 不将头信息 "Authorization" 传递给下游服务
  #  sensitiveHeaders: "Authorization"
  # 不将头信息 "Cookie,Set-Cookie" 传递给下游服务
  sensitiveHeaders: "Cookie,Set-Cookie"
  debug:
    request: true
  # 定义手动映射路由
  ignoredServices: "*"
  routes:
    licensing-service: "/licensing/**"
    organization-service: "/organization/**"
    authentication-service: "/authentication/**"

# ribbonTimeout = (ribbonReadTimeout + ribbonConnectTimeout) * (maxAutoRetries + 1) * (maxAutoRetriesNextServer + 1);
# ribbonTimeout = (3000 + 3000) * (1 + 0) + (1 + 1) = 12000 ms
ribbon:
  # RibbonClientConfiguration.DEFAULT_READ_TIMEOUT = 1000
  ReadTimeout: 3000
  # RibbonClientConfiguration.DEFAULT_CONNECT_TIMEOUT = 1000
  ConnectTimeout: 3000
  # DefaultClientConfigImpl.DEFAULT_MAX_AUTO_RETRIES = 0
  MaxAutoRetries: 0
  # DefaultClientConfigImpl.DEFAULT_MAX_AUTO_RETRIES_NEXT_SERVER = 1
  MaxAutoRetriesNextServer: 1
  eureka:
    # Enables the use of Eureka with Ribbon.
    enabled: "true"

signing:
  key: "345345fsdfsf5345"

# Zuul /routes actuator endpoint returning a 404
# It's now at /actuator/routes and needs to be enabled.
# 例如：查看当前路由配置
#   URL: http://localhost:8080/actuator/routes
# See: https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide#endpoints
management:
  endpoints:
    web:
      exposure:
        include: "mappings,filters,routes"
#        include: "*"

eureka:
  instance:
    # 注册服务的 IP，而不是服务器名称。
    # 在默认情况下，Eureka 在尝试注册服务时，将会使用主机名让外界与它进行联系。
    # 这种方式在基于服务器的环境中运行良好，在这样的环境中，服务会被分配一个 DNS
    # 支持的主机名。但是，基于容器的部署（如 Docker）中，容器将以随机生成的主机名
    # 启动，并且该容器没有 DNS 记录。
    # 如果没有将 eureka.instance.prefer-ip-address 设置为 true，那么客户端应用
    # 程序将无法正确地解析主机名的位置，因为该容器不存在 DNS 记录。设置 prefer-ip-address
    # 属性将通知 Eureka 服务，客户端想要通过 IP 地址进行通告。
    # 基于云的微服务应该是短暂的和无状态的，它们可以随意启动和关闭。IP 地址更适合这些类型的服务。
    preferIpAddress: true
  client:
    # 该属性是一个触发器，它可以告诉服务通过 Eureka 注册它自身。
    registerWithEureka: true
    # 该属性告诉 Spring Eureka 客户端以获取注册表的本地副本。
    # 将此属性设置为 true 将在本地缓存注册表，而不是每次查找服务都调用 Eureka 服务。
    # 每隔 30s，客户端软件就会重新联系 Eureka 服务，以便查看注册表是否有任何变化。
    fetchRegistry: true
    # 该属性包含客户端用于解析服务位置的 Eureka 服务的列表，该列表以逗号进行分隔。
    # 建立多个 URL 服务并不足以实现高可用性。eureka.service-url.default-zone 属性
    # 仅为客户端提供一个进行通信的 Eureka 服务列表。除此之外，还需要建立多个 Eureka 服务，
    # 以便相互复制注册表的内容。
    #  "default-zone" is a magic string fallback value that provides
    # the service URL for any client that does not express a preference
    # (in other words, it is a useful default, see EurekaClientConfigBean.getEurekaServerServiceUrls)
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
