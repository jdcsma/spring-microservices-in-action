debug: false

server:
  port: 8082

spring:
  application:
    # 将使用 Eureka 注册的服务的逻辑名称
    # 每个通过 Eureka 注册的服务都会有两个与之相关的组件：
    # 1）应用程序 ID 用于表示一组服务实例。在基于 Spring Boot 的微服务中，
    #    应用程序 ID 始终是为 spring.application.name 属性设置的值。
    # 2）实例 ID 是一个随机数，用于代表单个服务实例。
    #
    # 通常 spring.application.name 属性写在 bootstrap.yml 中。
    name: organization-service
  profiles:
    active: default
  jpa:
    hibernate:
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

eureka:
  instance:
    # 在默认情况下，Eureka 在尝试注册服务时，将会使用主机名让外界与它进行联系。
    # 这种方式在基于服务器的环境中运行良好，在这样的环境中，服务会被分配一个 DNS
    # 支持的主机名。但是，基于容器的部署（如 Docker）中，容器将以随机生成的主机名
    # 启动，并且该容器没有 DNS 记录。
    # 如果没有将 eureka.instance.prefer-ip-address 设置为 true，那么客户端应用
    # 程序将无法正确地解析主机名的位置，因为该容器不存在 DNS 记录。设置 prefer-ip-address
    # 属性将通知 Eureka 服务，客户端想要通过 IP 地址进行通告。
    # 基于云的微服务应该是短暂的和无状态的，它们可以随意启动和关闭。IP 地址更适合这些类型的服务。
    prefer-ip-address: true   # 注册服务的 IP，而不是服务器名称
  client:
    # 该属性是一个触发器，它可以告诉服务通过 Eureka 注册它自身。
    register-with-eureka: true
    # 该属性告诉 Spring Eureka 客户端以获取注册表的本地副本。
    # 将此属性设置为 true 将在本地缓存注册表，而不是每次查找服务都调用 Eureka 服务。
    # 每隔 30s，客户端软件就会重新联系 Eureka 服务，以便查看注册表是否有任何变化。
    fetch-registry: true
    # 该属性包含客户端用于解析服务位置的 Eureka 服务的列表，该列表以逗号进行分隔。
    # 建立多个 URL 服务并不足以实现高可用性。eureka.service-url.default-zone 属性
    # 仅为客户端提供一个进行通信的 Eureka 服务列表。除此之外，还需要建立多个 Eureka 服务，
    # 以便相互复制注册表的内容。
    #  "default-zone" is a magic string fallback value that provides
    # the service URL for any client that does not express a preference
    # (in other words, it is a useful default, see EurekaClientConfigBean.getEurekaServerServiceUrls)
    service-url:
      default-zone: http://localhost:8761/eureka/