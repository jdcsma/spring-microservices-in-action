debug: false

service:
  property: "I AM A DEFAULT PROPERTY"

# @See org.springframework.boot.autoconfigure.web.ServerProperties
server:
  port: 8081

spring:
  datasource:
    platform: "mysql"
    driverClassName: "com.mysql.cj.jdbc.Driver"
    url: "jdbc:mysql://localhost:3306/license_default?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=True"
    username: "root"
    password: "{cipher}1a6d087099a484013f94121ba60d15688a2307dcbff5769ee7e6ec33eae74393"
    tomcat:
      testWhileIdle: "true"
      validationQuery: "SELECT 1"
  jpa:
    database: "MYSQL"
    showSql: "true"
    properties:
      hibernate:
        dialect: "org.hibernate.dialect.MySQL8Dialect"
        naming:
          implicitStrategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
          physicalStrategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  cloud:
    loadbalancer:
      ribbon:
        # The property is important.
        # It disables the default Netflix Ribbon-backed load balancing strategy
        # that’s been in place since Spring Cloud debuted in 2015.
        # We want to use the new Spring Cloud Load balancer.
        enabled: false
      cache:
        # Disables Spring Cloud LoadBalancer caching mechanism.
        enabled: false
    stream:
      # @See https://docs.spring.io/spring-cloud-stream/docs/3.0.10.RELEASE/reference/html/spring-cloud-stream.html#_binder_configuration_properties
      # @see org.springframework.cloud.stream.config.BindingProperties
      bindings:
        # Sink: <bindingName> (for example, spring.cloud.stream.bindings.input)
        customSink: # or input @see org.springframework.cloud.stream.messaging.Sink.INPUT = "input"
          # Channel: The physical name at the broker that the binder binds to.
          destination: "orgChangeTopic"
          # Specifies content-type that will be used by this binding in the event it is not
          #	specified in Message headers. Default: 'application/json'.
          contentType: "application/json"
          # Unique name that the binding belongs to (applies to consumers ONLY).
          # Multiple consumers within the same group share the subscription (for parallel).
          # A null or empty String value indicates an anonymous group that is not shared.
          group: licensingGroup
      # @see https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/3.0.10.RELEASE/reference/html/spring-cloud-stream-binder-kafka.html#_kafka_binder_properties
      kafka:
        # @see org.springframework.cloud.stream.binder.kafka.properties.KafkaBinderConfigurationProperties
        binder:
          # KafkaBinderConfigurationProperties.DEFAULT_KAFKA_CONNECTION_STRING = "localhost:9092"
          # A list of brokers to which the Kafka binder connects.
          brokers: "localhost"
          defaultBrokerPort: "9092"
          # It is no longer required (since 2.0).
          # @See https://stackoverflow.com/questions/52604056/spring-cloud-kafka-binder-without-zknodes
          # zkNodes: localhost
  # @see org.springframework.boot.autoconfigure.data.redis.RedisProperties
  redis:
    host: "localhost"
    port: "6379"
    password: "root"

security:
  oauth2:
    # @see org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties
    resource:
      userInfoUri: "http://localhost:8084/auth/user_authorities"
    client:
      # @see org.springframework.boot.autoconfigure.security.oauth2.client.ClientCredentialsCondition
      # @see org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOperationsConfiguration.SingletonScopedConfiguration
      grantType: "client_credentials"

redis:
  # Using spring.redis.host
  host: "localhost"
  # Using spring.redis.port
  port: "6379"
  # Using spring.redis.password
  password: "root"

signing:
  key: "345345fsdfsf5345"

management:
  endpoints:
    web:
      exposure:
        include: "mappings,refresh"
#        include: "*"

eureka:
  instance:
    # 注册服务的 IP，而不是服务器名称。
    # 在默认情况下，Eureka 在尝试注册服务时，将会使用主机名让外界与它进行联系。
    # 这种方式在基于服务器的环境中运行良好，在这样的环境中，服务会被分配一个 DNS
    # 支持的主机名。但是，基于容器的部署（如 Docker）中，容器将以随机生成的主机名
    # 启动，并且该容器没有 DNS 记录。
    # 如果没有将 eureka.instance.prefer-ip-address 设置为 true，那么客户端应用
    # 程序将无法正确地解析主机名的位置，因为该容器不存在 DNS 记录。设置 prefer-ip-address
    # 属性将通知 Eureka 服务，客户端想要通过 IP 地址进行通告。
    # 基于云的微服务应该是短暂的和无状态的，它们可以随意启动和关闭。IP 地址更适合这些类型的服务。
    preferIpAddress: true
  client:
    # 该属性是一个触发器，它可以告诉服务通过 Eureka 注册它自身。
    registerWithEureka: true
    # 该属性告诉 Spring Eureka 客户端以获取注册表的本地副本。
    # 将此属性设置为 true 将在本地缓存注册表，而不是每次查找服务都调用 Eureka 服务。
    # 每隔 30s，客户端软件就会重新联系 Eureka 服务，以便查看注册表是否有任何变化。
    fetchRegistry: true
    # 该属性包含客户端用于解析服务位置的 Eureka 服务的列表，该列表以逗号进行分隔。
    # 建立多个 URL 服务并不足以实现高可用性。eureka.service-url.default-zone 属性
    # 仅为客户端提供一个进行通信的 Eureka 服务列表。除此之外，还需要建立多个 Eureka 服务，
    # 以便相互复制注册表的内容。
    #  "default-zone" is a magic string fallback value that provides
    # the service URL for any client that does not express a preference
    # (in other words, it is a useful default, see EurekaClientConfigBean.getEurekaServerServiceUrls)
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
